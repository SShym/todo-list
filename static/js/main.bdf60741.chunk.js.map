{"version":3,"sources":["img/edit.svg","img/trash.svg","Components/Todo/Todo.js","Components/NewTodo/NewTodo.js","hooks/useLocalStorage.js","Components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","task","setTask","className","onSubmit","e","preventDefault","edit","id","type","placeholder","value","name","onChange","target","onClick","toggleComplete","isCompleted","src","editBtn","alt","remove","trashBtn","NewTodo","create","uuidv4","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","TodoList","todos","setTodo","updatedTask","map","todo","filter","t","newTodo","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdf60741.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/edit.418a6665.svg\";","export default __webpack_public_path__ + \"static/media/trash.bba7f8a9.svg\";","import './Todo.css'\nimport React, { useState } from 'react'\nimport editBtn from '../../img/edit.svg'\nimport trashBtn from '../../img/trash.svg'\n\n//--------------------------------------------- HOOKS -----------------------------------------//\n\nconst Todo = (props) => {    \n    const [isEditing, setEditing] = useState(false)\n    const [task, setTask] = useState(props.task)\n\n    const toggleEdit = () => setEditing(true)\n    const handleRemove = () => props.remove(props.id)\n    const handleToggle = () => props.toggleComplete(props.id)\n    const handleChange = (e) => setTask(e.target.value)\n\n    const handleUpdate = (e) => {\n        e.preventDefault()\n        props.edit(props.id, task)\n        setEditing(false)\n    }\n      \n    if (isEditing) {\n        return(\n            <div className=\"Todo\" >\n                <form className=\"Todo-edit\" onSubmit={handleUpdate}>\n                    <div>\n                    <input \n                        type=\"text\" \n                        placeholder=\"edit Todo\" \n                        value={task} \n                        name=\"task\" \n                        onChange={handleChange} \n                    /></div>\n                    <div><button type=\"submit\">Todo</button></div>\n                </form>\n            </div>\n        );\n    } else {\n        return(\n            <div className=\"Todo\" >\n                <li onClick={handleToggle} \n                    className={props.isCompleted ? \"Todo-Task completed\" : \"Todo-Task\"}>\n                    {props.task}\n                </li>\n                <div className=\"Todo-buttons\">\n                    <button onClick={toggleEdit}>\n                        <img className=\"editBtn\" src={editBtn} alt=\"editBtn\" />\n                    </button>\n                    \n                    <button onClick={handleRemove}>\n                        <img className=\"trashBtn\" src={trashBtn} alt=\"trashBtn\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Todo;\n\n//--------------------------------------------- CLASS -----------------------------------------//\n\n// class Todo extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             isEditing: false,\n//             task: this.props.task,\n//         }\n//     }\n\n//     handleRemove = () => {\n//         this.props.remove(this.props.id)\n//     }\n\n//     toggleEdit = () => {\n//         this.setState({\n//             isEditing: !this.state.isEditing\n//         })\n//     }\n\n//     handleChange = (e) => {\n//         this.setState({\n//             [e.target.name]: e.target.value\n//         })\n//     }\n\n//     handleUpdate = (e) => {\n//         e.preventDefault()\n//         this.props.update(this.props.id, this.state.task)\n//         this.setState({isEditing: false})\n//     }\n\n//     handleToggle = () => {\n//         this.props.toggleCompletion(this.props.id)\n//     }\n\n//     render() {\n//         let results;\n\n//         if (this.state.isEditing) {\n//             results = (\n//                 <div className=\"Todo\" >\n//                     <form className=\"Todo-edit\" onSubmit={this.handleUpdate}>\n//                         <input type=\"text\" placeholder=\"edit Todo\" value={this.state.task} name=\"task\" onChange={this.handleChange} />\n//                         <button type=\"submit\">Todo</button>\n//                     </form>\n//                 </div>\n//             )\n//         } else {\n//             results = (\n//                 <div className=\"Todo\" >\n//                     <li onClick={this.handleToggle} className={this.props.isCompleted ? \"Todo-Task completed\" : \"Todo-Task\"}>{this.props.task}</li>\n//                     <div className=\"Todo-buttons\">\n//                         <button onClick={this.toggleEdit}><img className=\"editBtn\" src={editBtn} alt=\"\" /></button>\n//                         <button onClick={this.handleRemove}><img className=\"trashBtn\" src={trashBtn} alt=\"\" /></button>\n//                     </div>\n//                 </div>\n//             )\n//         }\n\n//         return (\n//             results\n//         )\n//     }\n// }\n\n// export default Todo;\n","import './NewTodo.css'\nimport React, { useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\n\nconst NewTodo = (props) => {\n    const [task, setTask] = useState('');\n\n    const handleChange = (e) => setTask(e.target.value)\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        props.create({task, id: uuidv4(), isCompleted: false })\n        setTask('')\n    }\n    \n    return (\n        <form className=\"NewTodo\" onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                id=\"task\" \n                value={task} \n                onChange={handleChange} \n            />\n            <button type=\"submit\">add todo</button>\n        </form>\n    )\n}\n\nexport default NewTodo;\n\n// class NewTodo extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             task: \"\",\n//         }\n//     }\n\n//     handleChange = (evt) => {\n//         this.setState({\n//             [evt.target.name] : evt.target.value\n//         })\n//     }\n\n//     handleSubmit= (evt) => {\n//         evt.preventDefault()\n\n//         this.props.createTodo({\n//             ...this.state,\n//             id: uuidv4(), \n//             isCompleted: false \n//         })\n        \n//         this.setState({\n//             task: \"\"\n//         })\n//     }\n\n//     render() {\n//         return (\n//             <form className=\"NewTodo\" onSubmit={this.handleSubmit}>\n//                 <input \n//                     type=\"text\" \n//                     name=\"task\" \n//                     id=\"task\" \n//                     value={this.state.task} \n//                     onChange={this.handleChange} \n//                 />\n//                 <button type=\"submit\">add todo</button>\n//             </form>\n//         )\n//     }\n// }\n\n// export default NewTodo;\n","import { useState } from \"react\";\r\n// Hook\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;","import './TodoList.css'\nimport React from 'react'\nimport Todo from '../Todo/Todo'\nimport NewTodo from '../NewTodo/NewTodo'\nimport useLocalStorage from '../../hooks/useLocalStorage'\n\n//--------------------------------------------- HOOKS -----------------------------------------//\n\nconst TodoList = () => {\n    const [todos, setTodo] = useLocalStorage('todos', [])\n\n    const create = (newTodo) => setTodo([...todos, newTodo])\n    const edit = (id, updatedTask) => setTodo(todos.map(todo => (todo.id === id) ? {...todo, task: updatedTask} : todo));\n    const remove = (id) => setTodo(todos.filter(todo => (todo.id !== id)))\n    const toggleComplete = (id) => setTodo(todos.map(todo => (todo.id === id) ? {...todo, isCompleted: !todo.isCompleted } : todo));\n\n    return (\n        <div className=\"TodoList\">\n            <h1>TODO LIST</h1>\n            <ul>\n                {todos.map(t => (\n                    <Todo key={t.id} task={t.task} id={t.id} remove={remove} edit={edit} \n                        isCompleted={t.isCompleted} toggleComplete={toggleComplete} \n                    />\n                ))}\n            </ul>\n            <NewTodo create={create} />\n        </div>\n    )\n}\n\nexport default TodoList;\n\n//--------------------------------------------- CLASS -----------------------------------------//\n\n// class TodoList extends React.Component {\n//     constructor(props) {\n//         super(props)\n//             this.state = {\n//                 todos: []\n//             }\n//     }\n\n//     create = (newTodo) => {\n//         this.setState({\n//             todos: [...this.state.todos, newTodo]\n//         })\n//     }\n\n//     remove = (id) => {\n//         this.setState({\n//             todos: this.state.todos.filter(t => (t.id !== id))\n//         })\n//     }\n\n//     update = (id, updatedTask) => {\n//         this.setState({\n//             todos: this.state.todos.map(todo => {\n//                 if (todo.id === id) {\n//                     return { \n//                         ...todo, \n//                         task: updatedTask \n//                     }\n//                 }\n//                 return todo\n//             })\n//         })\n//     }\n\n//     toggleCompletion = (id) => {\n//         this.setState({\n//             todos: this.state.todos.map(todo => {\n//                 if (todo.id === id) {\n//                     return { \n//                         ...todo, \n//                         isCompleted: !todo.isCompleted \n//                     }\n//                 }\n//                 return todo\n//             })\n//         })\n//     }\n\n//     render() {\n//         return (\n//             <div className=\"TodoList\">\n//                 <h1>TODO LIST</h1>\n//                 <ul>\n//                     {\n//                     this.state.todos.map(t => (\n//                         <Todo \n//                             key={t.id} \n//                             task={t.task} \n//                             id={t.id} \n//                             remove={this.remove} \n//                             update={this.update} \n//                             isCompleted={t.isCompleted} \n//                             toggleCompletion={this.toggleCompletion} \n//                         />\n//                     ))}\n//                 </ul>\n//                 <NewTodo createTodo={this.create} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default TodoList;\n","import './App.css';\nimport TodoList from './Components/TodoList/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}